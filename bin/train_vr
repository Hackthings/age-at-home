#!/bin/csh -fb
#
# top-level
#
set APP = "aah"
set API = "train"
if ($?TMP == 0) set TMP = "/var/lib/age-at-home/label"

#
# GET CLOUDANT SETUP
#

if (-e ~$USER/.cloudant_url) then
    set cc = ( `cat ~$USER/.cloudant_url` )
    if ($#cc > 0) set CU = $cc[1]
    if ($#cc > 1) set CN = $cc[2]
    if ($#cc > 2) set CP = $cc[3]
endif

if ($?CLOUDANT_URL) then
    set CU = $CLOUDANT_URL
else if ($?CN && $?CP) then
    set CU = "$CN":"$CP"@"$CN.cloudant.com"
else
    if ($?DEBUG) echo `date` "$0 $$ -- no Cloudant URL" >>! $TMP/LOG
    goto done
endif

#
# HACK FOR BREWING JQ
#

if (! -e /usr/local/bin/brew) then
   echo "*** NO HOME BREW?  Install from http://brew.sh"
   goto done
endif
if (! -e /usr/local/bin/jq) then
   echo "*** BREWING 'jq' ..." >& /dev/stderr
   brew install jq >& /dev/stderr
endif

#
# PROCESS COMMAND LINE ARGUMENTS
#

@ i = 1
while ($i <= $#argv)
    set t = "$argv[$i]"
    if (($#t == 1) && ($#argv >= $i)) then
	if ("$t" == "-n") then
	    @ i++
	    set maxfiles = $argv[$i]
	else if ("$t" == "-D") then
	    # delete existing model (must also specify -m <model>)
	    set delete = true
	else if ("$t" == "-m") then
	    @ i++
	    # model by <classifier_id>
	    set model = $argv[$i]
	else if ("$t" == "-N") then
	    @ i++
	    # negative example class
	    set notags  = $argv[$i]
	else if ("$t" == "-d") then
	    @ i++
	    # base path directory
	    set TMP = $argv[$i]
       else if ($#argv >= $i) then
	   # name of directory in TMP
	   set device = "$argv[$i]"
       endif
    endif
    @ i++
end

#
# ESTABLISH DEFAULT PARAMETERS
#

if ($?device && $?model && $?maxfiles && $?notags) then
    # SUCCESS
else
    if ($?device == 0) set device="rough-fog"
    if ($?maxfiles == 0) set maxfiles = 100
    if ($device == "rough-fog" && $?notags == 0) set notags = "kitchen"
    if ($device == "damp-cloud" && $?notags == 0) set notags = "bathroom"
endif

#
# SETUP WATSON VISUAL_RECOGNITION
#

set creds = ~$USER/.watson.visual-recognition.json
if (-e $creds) then
    set keys = ( `jq '.[]|.credentials.api_key' $creds` )
    if ($#keys > 0) set api_key = `echo "$keys[1]" | sed 's/"//g'`
    set urls = ( `jq '.[]|.credentials.url' $creds` )
    if ($#urls > 0) set TU = `echo "$urls[1]" | sed 's/"//g'`
else 
    echo "*** NO CREDENTIALS ($creds); create file and copy credentials from visual-recognition service on bluemix.net" >& /dev/stderr
    goto done
endif
# these should be query'able from the API
if ($?verid == 0) set verid = "v3"
if ($?vdate == 0) set vdate = "2016-05-20"

echo "+++ Watson VisualRecognition for version ($verid) - date ($vdate) @ ($TU) +++"

#
# GET EXISTING CLASSIFIERS FROM WATSON_VR
#

if ($?model) then
    if ($model == "$device") then
	# search for model by <name>
	set classifiers = ( `curl -q -s -L "$TU/$verid/classifiers?api_key=$api_key&version=$vdate" | jq '[.classifiers[]|select(.name=="'"$model"'")]'` )
    else
	# search for model by <classifier_id>
	set classifiers = ( `curl -q -s -L "$TU/$verid/classifiers?api_key=$api_key&version=$vdate" | jq '[.classifiers[]|select(.classifier_id=="'"$model"'")]'` )
    endif
else
    # return all models
    set classifiers = ( `curl -q -s -L "$TU/$verid/classifiers?api_key=$api_key&version=$vdate" | jq '.classifiers'` )
endif
if ($?classifiers) then
    if ($?DEBUG) echo `date` "+++ CLASSIFIERS (" `echo "$classifiers" | jq -c '.'` ") +++" >& /dev/stderr
else
    # no custom classifiers
    set classifiers = ()
endif

#
# TEST CLASSIFIER STATUS (ready or training)
#

if ($#classifiers > 0) then
    set ready = ( `echo "$classifiers" | jq '[.[]|select(.status=="ready")]'` )
    if ($?model == 0) then
	set cids = ( `echo $ready | jq '.[]|select(.name=="'"$device"'").classifier_id' | sed 's/"//g'` )
    else
        set cids = `echo "$classifiers" | jq '.[]|.classifier_id' | sed 's/"//g'`
    endif
    if ($#cids > 0) then
	echo "+++ existing classifiers for device ($device) +++"
	echo "$cids"
	if ($?model) then
	    foreach cid ( $cids )
		if ($cid == "$model") then
		    echo "+++ existing classifier ($model) +++"
		    if ($?delete) then
			echo "+++ deleting classifier id ($cid) +++"
			curl -s -q -X DELETE "$TU/$verid/classifiers/$cid?api_key=$api_key&version=$vdate"
		    else
			echo "+++ get detail for classifier id ($cid) +++"
			set detail = ( `curl -s -q "$TU/$verid/classifiers/$cid?api_key=$api_key&version=$vdate" | jq '.'` )
		    endif
		    break
		endif
	    end
	    if ($cid != "$model") then
		echo "+++ no classifier ($model) for device ($device) +++"
		goto done
	    endif
        endif
    else 
	set training = ( `echo "$classifiers" | jq '[.[]|select(.status=="training")]'` )
	set cids = ( `echo $training | jq '.[]|select(.name=="'"$device"'").classifier_id' | sed 's/"//g'` )
	if ($#cids > 0) then
	    echo "+++ classifier ($cids) is in training +++"
	    if ($?model) then
		foreach cid ( $cids )
		    if ($cid == "$model") then
			echo "+++ classifier id ($cid) in training +++"
			goto done
		    endif
		end
	    endif
	endif
    endif
endif

set existing = ()
if ($?detail) then
    set model_status = `curl -s -q -L "$CU/$device-$API/$model" | jq '.'`
    set doc = ( `echo "$model_status" | jq '._id,._rev' | sed 's/"//g'` )
    if ($#doc == 2 && $doc[1] == $model && $doc[2] != "") then
	set existing = ( `echo "$detail" | jq '.classes[]|.class' | sed 's/"//g'` )
    else
        echo "+++ No existing model status ($model_status) +++"
    endif
endif

set classdirs = ( "$TMP/$device/"* )
set classes = ()
set new = ()
foreach cd ( $classdirs )
    set cn = "$cd:t"
    set classes = ( $classes $cn )
    if ($#existing > 0) then
	foreach e ( $existing )
	    if ($cn == "$e") break
	end
	if ($cn != "$e") then
	    set new = ( $new $cn )
	endif
    else
	set new = ( $new $cn )
    endif
end 

echo "+++ EXISTING ($existing) NEW ($new) ALL ($classes) +++"

echo "+++ TRAINING SET - device $device for with negatives ($notags); $maxfiles per class" >& /dev/stderr

set xzips = ()
set positive = ()
set negative = ()
foreach xdir ( $classdirs )
    if (-d "$xdir" ) then
	set jpegs = ( `echo "$xdir"/*.jpg` ) 
	echo -n "$xdir : $#jpegs" >& /dev/stderr
	if ($#jpegs < 10) then
	    echo -n " - $#jpegs images; skipping (min 10)" >& /dev/stderr
	else
	    set xzip = "/tmp/$xdir:t.$$".zip
	    if (-e "$xzip") rm "$xzip"
	    if ($?maxfiles) then
		if ($maxfiles < $#jpegs) then
		    echo -n " - using $maxfiles of $#jpegs images"
		    zip -q -j -r -u "$xzip" $jpegs[1-$maxfiles]
		else
		    echo -n " - using $#jpegs images"
		    zip -q -j -r -u "$xzip" $jpegs
		endif
	    else
		echo " - using $#jpegs images"
		zip -q -j -r -u "$xzip" "$jpegs"
	    endif
	    if ($xdir:t != "$notags") then
		echo " - as positive"
		set t = ( `echo '-F "'"$xdir:t"'_positive_examples=@'"$xzip"'"'` )
		set positive = ( "$positive" "$t" )
	    else
		echo " - as negative"
		set t = ( `echo '-F "negative_examples=@'"$xzip"'"'` )
		set negative = ( "$negative" "$t" )
	    endif
	    set xzips = ( $xzips $xzip )
	endif
    else
	echo "Not a directory: $xdir" >& /dev/stderr
    endif
end

if ($#positive == 0 || $#negative == 0) then
    echo "Insufficient positive or negative ($notags) examples"
    rm -f $xzips
    goto done
endif

echo "+++ TRAIN $negative $positive +++"
echo 'curl -L -q -s "'"$TU/$verid/classifiers?api_key=$api_key&version=$vdate"'" -o /tmp/'$0:t.$$'.json -F "name='"$xdir:h:t"'"' "$positive" "$negative" >! /tmp/$0:t.$$.sh
echo "++++ RUNNING: " `cat /tmp/$0:t.$$.sh`
sh /tmp/$0:t.$$.sh
# cleanup
rm -f /tmp/$0:t.$$.sh
rm -f $xzips

# check result code
set code = `jq -c '.code' /tmp/$0:t.$$.json | sed 's/"//g'` 
if ($code == 400) then
    jq '.error' /tmp/$0:t.$$.json
    goto done
endif

# get classifier id to check on progress
set cid = `jq '.classifier_id' /tmp/$0:t.$$.json | sed 's/"//g'`
set sts = `jq '.status' /tmp/$0:t.$$.json | sed 's/"//g'`

# wait until done
onintr done
set start = `date +%s`
echo -n "+++ LEARNING ."
while ($sts != "ready") 
    sleep 30
    set sts = `curl -s -q -L "$TU/$verid/classifiers/$cid?api_key=$api_key&version=$vdate" | jq -c '.status' | sed 's/"//g'`
    echo -n "."
end
set end = `date +%s`
set elapsed = `echo $end - $start | bc`
echo " ($elapsed seconds) +++"

goto done

# don't update file information more than once per (in seconds)
set TTL = 30
set SECONDS = `date "+%s"`
set DATE = `echo $SECONDS \/ $TTL \* $TTL | bc`

# standardize QUERY_STRING to cache results
setenv QUERY_STRING "db=$device&model=$model"

# echo `date` "$0 $$ -- START ($QUERY_STRING)" >>! $TMP/LOG

#
# make $OUTPUT
#
set OUTPUT = "$TMP/$APP-$API-$QUERY_STRING.$DATE.json"

#
# update Cloudant
#
if ($?CLOUDANT_OFF == 0 && $?CU && $?device) then
    if ($?DEBUG) echo `date` "$0 $$ -- test if device exists ($CU/$device-$API)" >>! $TMP/LOG
    set DEVICE_device = `curl -s -q -X GET "$CU/$device-$API" | jq '.db_name'`
    if ( "$DEVICE_device" == "null" ) then
        if ($?DEBUG) echo `date` "$0 $$ -- creating device $CU/$device-$API" >>! $TMP/LOG
        # create device
        set DEVICE_device = `curl -s -q -X PUT "$CU/$device-$API" | jq '.ok'`
        # test for success
        if ( "$DEVICE_device" != "true" ) then
            # failure
            if ($?DEBUG) echo `date` "$0 $$ -- failure creating Cloudant database ($device-$API)" >>! $TMP/LOG
            setenv CLOUDANT_OFF TRUE
        else
            if ($?DEBUG) echo `date` "$0 $$ -- success creating device $CU/$device-$API" >>! $TMP/LOG
        endif
    endif
    if ( $?CLOUDANT_OFF == 0 ) then
        curl -s -q -o "$OLD" "$CU/$device-$API/$model" >>&! $TMP/LOG
        if (-s "$OLD") then
            set doc = ( `cat "$OLD" | jq ._id,._rev | sed 's/"//g'` )
            if ($#doc == 2 && $doc[1] == $model && $doc[2] != "") then
                set rev = $doc[2]
                if ($?DEBUG) echo `date` "$0 $$ -- deleting old output ($rev)" >>! $TMP/LOG
                curl -s -q -X DELETE "$CU/$device-$API/$model?rev=$rev" >>&! $TMP/LOG
            endif
        else
            if ($?DEBUG) echo `date` "$0 $$ -- no old output to delete" >>! $TMP/LOG
        endif
        if ($?DEBUG) echo `date` "$0 $$ -- storing new output" >>! $TMP/LOG
        curl -s -q -H "Content-type: application/json" -X PUT "$CU/$device-$API/$model" -d "@$OUTPUT" >>&! $TMP/LOG
        if ($status == 0) then
            if ($?DEBUG) echo `date` "$0 $$ -- success storing new output" >>! $TMP/LOG
        else
            if ($?DEBUG) echo `date` "$0 $$ -- failure storing new output" >>! $TMP/LOG
        endif
    else
        if ($?DEBUG) echo `date` "$0 $$ -- Cloudant OFF ($device-$API)" >>! $TMP/LOG
    endif
else
    if ($?DEBUG) echo `date` "$0 $$ -- no Cloudant update" >>! $TMP/LOG
endif


done:
rm -f /tmp/$0:t.$$.json
echo `date` "$0 $$ -- FINISH ($*)"
