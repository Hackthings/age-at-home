#!/bin/csh -fb

setenv DEBUG true

if ($?CGI == 0) setenv CGI "http://www.dcmartin.com/CGI/"
if ($?DIGITS == 0) setenv DIGITS "http://169.50.131.114:5001/"
if ($?TMP == 0) setenv TMP /var/lib/age-at-home

if ($#argv || $#argv > 3) then
    set db = "$1"
    if ($#argv > 1) set class = "$2"
    if ($#argv > 2) set model_id = "$3"
endif

if ($?db == 0) set db = rough-fog
if ($?class == 0) then
    if ($db == "damp-cloud") set class = bathroom
    if ($db == "rough-fog") set class = kitchen
endif
if ($?model_id == 0) then
    if ($db == "damp-cloud") set model_id = "20170106-234042-3a7d"
    if ($db == "rough-fog") set model_id = "20161226-234150-735c"
endif

if ($?db && $?class && $?model_id) then
  if ($?DEBUG) echo `date` "$0 $$ -- PROCESSING DB=$db CLASS=$class MODEL_ID=$model_id" >& /dev/stderr
else
    echo "$0:t <db> <label> [<model_id>]"
    exit
endif

# what we're looking to create/find
set files = "$TMP/digits/$db/$model_id/$class-files.txt"
set scores = "$TMP/digits/$db/$model_id/$class-scores.json"
set results = "$TMP/digits/$db/$model_id/$class-results.json"

if (! -s "$files") then
    echo `date` "$0 $$ -- GETTING $files" >& /dev/stderr
    curl -s -q -L "$CGI/aah-scored.cgi?db=$db&class=$class&mime=text" >! "$files"
endif
if (! -s "$scores" || ((-M "$files") > (-M "$scores"))) then
    set surl = "$DIGITS/models/images/classification/classify_many.json"

    set lc = `wc -l "$files" | awk '{ print $1 }'`
    echo `date` "$0 $$ -- creating $scores ($lc) using $model_id" >& /dev/stderr

    @ a = 1
    @ b = 0
    @ z = 100
    unset started
    while ($a <= $lc)
	@ b += $z
	if ($b > $lc) set b = $lc

	echo `date` "$0 $$ -- processing $a to $b" >& /dev/stderr

	set t = "$class.$a.$b.$$.txt"
	set s = "$class.$a.$b.$$.json"
        tail +$a "$files" | head -$z >! "$t"
	curl -s -q -L -X POST -F "image_list=@$t" -F "job_id=$model_id" "$surl" >! "$s"
	if (-s "$s") then
	    set err = `/usr/local/bin/jq '.error.message' "$s"`
	    if ("$err" != "null") then
		echo `date` "$0 $$ -- ERROR: $err" >& /dev/stderr
	    else
	        if ($?started) then
		    echo "," >> "$scores"
		else
		    echo "[" >>! "$scores"
		    set started = true
		endif
		cat "$s" >> "$scores"
	    endif
	else
	    echo `date` "$0 $$ -- NO RESULTS" >& /dev/stderr
	endif
	@ a = $b + 1
	rm -f "$s"
	rm -f "$t"
    end
    echo "]" >> "$scores"
endif
if (-s "$files" && -s "$scores" && ((! -s "$results") || ((-M "$scores") > (-M "$results")))) then
    echo `date` "$0 $$ -- ITERATING over $files and $scores" >& /dev/stderr
    unset started
    foreach i ( `cat "$files"` )
	set j = `echo "$i" | sed "s/.*db=\(.*\)&class=\(.*\)&id=\(.*\)/\1\/\2\/\3/"`
	set noglob
	set q = `/usr/local/bin/jq '[.[]|.classifications."'"$i"'"[]?]' "$scores"`
	if ($#q > 1) then
	    # get first class (TOP1)
	    set h = `echo "$q" | /usr/local/bin/jq -r '.[0][0]' | sed "s/.*class=\(.*\)/\1/"`
	    # get all scores (TOP5 is default)
	    set k = `echo "$q" | /usr/local/bin/jq -r '.[][1]' | awk 'BEGIN { mx=0; mn=100; nz=0;c=0; s = 0;v=0 } { c++; if ($1 > mx) mx=$1; if ($1 < mn) mn=$1; if($1 > 0) { nz++; s += $1; m = s/nz; vs += ($1 - m)^2; v=vs/nz} } END { sd = sqrt(v); k = (mx - m)/sd; printf "\"count\":%d,\"non-zero\":%d,\"min\":%f,\"max\":%f,\"sum\":%f,\"mean\":%f,\"stdev\":%f,\"nsd\":%f", c, nz, mn, mx, s, m, sd, k }'`
	    unset noglob
	    if ($?started) then
	        echo "," >> "$results"
	    else
	        echo '{"job":"'"$model_id"'","results":[' >! "$results"
		set started = true
	    endif
	    echo '{"image":"'"$j"'","top1":"'"$h"'",'"$k"'}' >> "$results"
	else
	    echo `date` "$0 $$ -- NO RESULT: $i" >& /dev/stderr
        endif
    end
    echo "]}" >> "$results"
endif
if (-s "$results") then
    set count = 1
    echo `date` "$0 $$ -- LOWEST RANK: " `jq '.results|sort_by(.max)|sort_by(.nsd)' "$results" | jq '.[1]'`
    echo `date` "$0 $$ -- HIGHEST RANK: " `jq '.results|sort_by(.max)|sort_by(.nsd)' "$results" | jq '.[-1]'`
    foreach c ( `jq -r '.results[].top1' "$results" | sort | uniq` )
	echo -n `date` "$0 $$ -- LEAST ($c): " 
	jq -c '[.results[]|select(.top1=="'"$c"'")]|sort_by(.stdev)[0:'"$count"']' "$results"
	echo -n `date` "$0 $$ -- MOST ($c): " 
	jq -c '[.results[]|select(.top1=="'"$c"'")]|sort_by(.max/.sum)[-'"$count"':]' "$results"
    end
endif
