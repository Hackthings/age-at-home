#!/bin/csh -fb

set DEBUG = true

if (! -e /usr/local/bin/brew) then
   if ($?DEBUG) echo `date` "$0 $$ -- NO HOME BREW?  Install from http://brew.sh" >& /dev/stderr
   exit
endif
if (! -e /usr/local/bin/jq) then
   if ($?DEBUG) echo `date` "$0 $$ -- BREWING 'jq' ..." >& /dev/stderr
   brew install jq >& /dev/stderr
endif

if ($#argv > 0) then
    @ i = 0
    set t = "$argv[1]"
    if (($#t == 1) && ($#argv > 1)) then
	if ("$t" == "-m") then
	    set model = $argv[2]
	    @ i = 2
	endif
    endif
    if ($#argv > $i) then
	@ i++
        set jpegfiles = ( $argv[$i-] ) 
    endif
endif
if ($?jpegfiles == 0) then
    if ($?DEBUG) echo `date` "$0 $$ -- USAGE: $0 [-m <model>] JPEG(s)" >& /dev/stderr
    goto done
endif

set creds = ~$USER/.watson.visual-recognition.json
if (-e $creds) then
    set api_key = ( `jq '.[0]|.credentials.api_key' $creds | sed 's/"//g'` )
    if ($?DEBUG) echo `date` "$0 $$ -- USING APIKEY $api_key" >& /dev/stderr
    set url = ( `jq '.[0]|.credentials.url' $creds | sed 's/"//g'` )
    if ($?DEBUG) echo `date` "$0 $$ -- USING URL $url" >& /dev/stderr
    # set base
    set TU = $url
else if ($?TU == 0) then
    echo `date` "$0 $$ -- NO CREDENTIALS ($creds); create file and copy credentials from visual-recognition service on bluemix.net" >& /dev/stderr
    goto done
endif

if ($?verid == 0) set verid = "v3"
if ($?vdate == 0) set vdate = "2016-05-20"

if ($?model) then
    set classifiers = ( `curl -q -s -L "$TU/$verid/classifiers?api_key=$api_key&version=$vdate" | jq '.classifiers[]|select(.classifier_id=="'"$model"'")'` )
else
    set classifiers = ( `curl -q -s -L "$TU/$verid/classifiers?api_key=$api_key&version=$vdate" | jq '.classifiers[]'` )
endif
if ($#classifiers > 0) then
    set classifier = `echo "$classifiers" | jq '.classifier_id' | sed 's/"//g'`
    if ($#classifier > 0) then
	if ($?DEBUG) echo `date` "$0 $$ -- Using classifiers ($classifier) +++" >& /dev/stderr
    else
	unset classifier
    endif
else
    if ($?DEBUG) echo `date` "$0 $$ -- no custom classifier (using default) +++" >& /dev/stderr
endif

if ($?classifier) then
    # prepare for URL
    set classifier = `echo "$classifier" | sed "s/ /,/g"`
endif

# The max number of images in a .zip file is limited to 20, and limited to 5 MB.
@ maxfiles = ( `ls -l $jpegfiles | awk '{ n += 1; sum += $5 } END { max = (5000*1024) / (sum / n); if (max > 20) max = 20; printf("%d\n", max) }'` )

@ i = 1
@ z = $maxfiles
@ t = 0
@ n = $#jpegfiles
set zip = /tmp/$0:t.$$.zip

while ($i <= $n) 
    @ t = $t + $z

again:
    set partial = /tmp/$0:t.$$.$i.$t.json
    
    if (-e "$partial") continue

    if ($t >= $n) @ t = $n
    set ifiles = ( $jpegfiles[$i-$t] )
    set nfiles = $#ifiles
    if ($nfiles > 1) then
	zip -q -j -r -u $zip $ifiles >& /dev/stderr
	if (-s $zip) then
	    if ($?DEBUG) echo `date` "$0 $$ -- " `ls -al $zip` >& /dev/stderr
	    set ifiles = $zip
	else
	    exit
	endif
    endif

    if ($?DEBUG) echo -n `date` "$0 $$ -- classify ($i - $t) $nfiles images " >& /dev/stderr
    set start = `date +%s`
    if ($?classifier) then
    	if ($?USE_DEFAULT) then
	    if ($?DEBUG) echo `date` "$0 $$ -- CLASSIFY $ifiles using (default,$classifier)" >& /dev/stderr
	    curl -f -s -q -L -F "images_file=@$ifiles" -o $partial \
		"$TU/$verid/classify?api_key=$api_key&classifier_ids=default,$classifier&threshold=0.000001&version=$vdate" >& /dev/stderr
	else
	    if ($?DEBUG) echo `date` "$0 $$ -- CLASSIFY $ifiles using ($classifier)" >& /dev/stderr
	    curl -f -s -q -L -F "images_file=@$ifiles" -o $partial \
		"$TU/$verid/classify?api_key=$api_key&classifier_ids=$classifier&threshold=0.000001&version=$vdate" >& /dev/stderr
	endif
    else
	if ($?DEBUG) echo `date` "$0 $$ -- CLASSIFY $ifiles using default" >& /dev/stderr
	curl -f -s -q -L -F "images_file=@$ifiles" -o $partial \
	    "$TU/$verid/classify?api_key=$api_key&classifier_ids=default&threshold=0.000001&version=$vdate" >& /dev/stderr
    endif
    if ($status == 22 || ! -s $partial) then
        # call failed -- retry
	if ($?DEBUG) echo "FAILED ($t $z) ($ifiles)" >& /dev/stderr
	# try smaller set size
	@ t--
	@ z--
	# remove old
	rm -f $zip $partial
	goto again
    endif
    # { "status": "ERROR", "statusInfo": "daily-transaction-limit-exceeded" }
    set error = `jq '.status' $partial`
    if ($status == 0 && $error == "ERROR") then
	if ($?DEBUG) echo `date` "$0 $$ -- $error - " `jq '.statusInfo' $partial` >& /dev/stderr
        rm -f $partial
	rm -f $zip
	goto done
    else if (-s $zip) then
	# we sent a ZIP file; remove it and elide the ZIP file pre-pended to image name
	rm -f $zip
	cat $partial | sed "s@$zip/@@" >>! /tmp/$0:t.$$.json
    else if ($nfiles > 0) then
        # simply append partial to complete
	cat $partial >>! /tmp/$0:t.$$.json
    endif
    set end = `date +%s`
    @ elapsed = $end - $start
    if ($?DEBUG) echo "($elapsed seconds)" >& /dev/stderr
    # output partial results
    if ($?DEBUG) jq -c '.images[]|{"image":.image,"classes":[.classifiers[].classes[]]|sort_by(.score)[-1]}' $partial >& /dev/stderr

    # remove partial
    rm -f $partial

    # increment to next set of images
    @ i = $t + 1

    if ($?FACES) then
	# should pick only those classified as "person"
	echo "+++ FACES +++"
	curl -s -q -L -o /tmp/$0:t.$$.json -X POST -F "images_file=@$ifile" "$TU/$verid/detect_faces?api_key=$api_key&version=$vdate"
	jq '.' /tmp/$0:t.$$.json
    endif
    if ($?TEXT) then
	echo "+++ TEXT +++"
	curl -s -q -L -o /tmp/$0:t.$$.json -X POST -F "images_file=@$ifile" "$TU/$verid/recognize_text?api_key=$api_key&version=$vdate"
	jq '.' /tmp/$0:t.$$.json
    endif
end

output:

# top class (by score) per image for each classifier applied
# {"image":"20160428095504-749-00.jpg","classes":[{"name":"default","id":"default","classes":null},{"name":"damp-cloud","id":"dampcloud_231362639","classes":{"class":"person","score":0.309657}},{"name":"damp-cloud","id":"dampcloud_257127137","classes":{"class":"person","score":0.310192}},{"name":"rough-fog","id":"roughfog_1514965218","classes":{"class":"dog","score":0.480892}},{"name":"rough-fog","id":"roughfog_228618634","classes":{"class":"dog","score":0.478403}},{"name":"rough-fog","id":"roughfog_653635843","classes":{"class":"dog","score":0.479636}},{"name":"rough-fog","id":"roughfog_80528242","classes":{"class":"dog","score":0.512194}}]}
# jq -c '.images[]|{"image":.image,"classes":[.classifiers[]|{"name":.name,"id":.classifier_id,"classes":.classes|sort_by(.score)[-1]}]}'

# all classes per image for all classifiers applied
# {"image":"20160428095504-749-00.jpg","classes":[{"class":"person","score":0.309657},{"class":"person","score":0.310192},{"class":"cat","score":0.0383389},{"class":"dog","score":0.480892},{"class":"person","score":0.186817},{"class":"cat","score":0.0383551},{"class":"dog","score":0.478403},{"class":"person","score":0.186166},{"class":"cat","score":0.0383465},{"class":"dog","score":0.479636},{"class":"person","score":0.186099},{"class":"cat","score":0.0321449},{"class":"dog","score":0.512194},{"class":"person","score":0.142043}]}
# jq -c '.images[]|{"image":.image,"classes":[.classifiers[].classes[]]}' 

# top class (by score) per image for all classifiers applied
# {"image":"20160428095504-749-00.jpg","classes":{"class":"dog","score":0.512194}}
# jq -c '.images[]|{"image":.image,"classes":[.classifiers[].classes[]]|sort_by(.score)[-1]}' /tmp/$0:t.$$.json

output:

cat /tmp/$0.$$.json

done:

rm -f /tmp/$0:t.$$.json
