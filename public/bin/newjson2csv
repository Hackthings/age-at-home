#!/bin/tcsh
#
if ($?CLOUDANT_USERNAME) then
    setenv CN $CLOUDANT_USERNAME
else
    setenv CN "538e7925-b7f5-478b-bf75-2f292dcf642a-bluemix"
endif

if ($?CLOUDANT_PASSWORD) then
    setenv CP $CLOUDANT_PASSWORD
endif

if ($?CLOUDANT_URL) then
    setenv CU $CLOUDANT_URL
else
    if ($?CN && $?CP) then
	setenv CU "https://$CN":"$CP"@"$CN.cloudant.com"
    else
	setenv CU "https://$CN.cloudant.com"
    endif
endif


if ($?CLOUDANT_DATABASE) then
    setenv DB $CLOUDANT_DATABASE
else
    setenv DB "rough-fog"
endif

if ( $#argv > 0 ) then
    setenv DB "$argv[1]"
    if ($#argv > 1) then
	setenv OPERATIONS "$argv[2-]"
    endif
endif

setenv NEWJSON "$DB-new.json"

if ( $?SEQID ) then
   set seqid = $SEQID
else if (-e "$NEWJSON") then
    set seqid = ( `jq .last_seq "$NEWJSON"` )
    mv "$NEWJSON" "$DB-old.json"
else
   set seqid = 0
endif

echo "GET: $NEWJSON (seqid = $seqid)"

curl "$CU/$DB/_changes?include_docs=true&since=$seqid" >! "$NEWJSON"
set results = `jq '.results[]' "$NEWJSON" | wc -l | awk '{ print $1 }'`
set seqid = ( `jq .last_seq "$NEWJSON"` )
if ($#seqid == 0) then
    echo "FAIL: $NEWJSON"
    exit
endif
if ($results == 0) then
    echo "STOP: no new results"
    exit
endif

# get all rows
setenv ALLROWS "$DB-new.csv"
if ( (! -e "$ALLROWS") || ((-M "$NEWJSON") > (-M "$ALLROWS")) ) then
    in2csv -k "results" "$NEWJSON" >! "$ALLROWS"
endif

setenv ARBASE "$ALLROWS:r"

if ( -e "$ALLROWS" ) then
    if ( (! -e "$ARBASE"-intervals.csv ) || ((-M "$ALLROWS") > (-M "$ARBASE-intervals.csv"))) then
	# note insertion of "id" in middle
	set datetime = ( doc/year doc/month doc/day id doc/hour doc/minute doc/second )
	set dtcolumns = `echo "$datetime" | sed "s/ /,/g"`

	echo "STAT: creating $ARBASE-intervals.csv"
	echo "interval,ampm,week,day,id" >! "$ARBASE"-intervals.csv

	# note utilization of gawk(1)
	csvcut -c "$dtcolumns" "$ALLROWS" | tail +2 | \
	    gawk -F, '{ m=$5*60+$6; m = m / 15; t=mktime(sprintf("%4d %2d %2d %2d %2d %2d", $1, $2, $3, $5, $6, $7)); printf "%d,%s,%s,%s,%s\n", m, strftime("%p",t),strftime("%U",t),strftime("%A",t), $4 }' >> "$ARBASE"-intervals.csv
    else
    	echo "STAT: $ARBASE-intervals.csv up-to-date"
    endif
else
    echo "$ALLROWS does not exist; run newjson2csv $ALLROWS:r"
endif

set classifiers = ( person )
set class = person

# extract classifier and score
if ($#classifiers > 0 && ((-M "$ALLROWS") > (-M "$ARBASE-$class-values.csv"))) then
    echo "STAT: total $#classifiers"
    set colset = `csvstat -n "$ALLROWS" | awk '{ print $2 }'`
    set colnam = `echo $colset | sed "s/ /,/g"`
    set acolset = ( 'doc/alchemy/text' )

    set datetime = ( doc/year doc/month doc/day doc/hour doc/minute doc/second )
    set dtcolumns = `echo "$datetime" | sed "s/ /,/g"`

    echo "classifier,score,id,$dtcolumns" >! "$ARBASE-$class-values.csv"
    foreach i ( $classifiers )
	if ($i == \"\") continue

	echo -n "STAT: $i"
	echo "$colnam" >! "$i.csv"
	egrep ",$i," "$ALLROWS" >> "$i.csv"

	foreach j ( $acolset )
	    csvcut -c "$j","$j:h/score","id","$dtcolumns" "$i.csv" | egrep "^$i," >> "$ARBASE-$class-values.csv"
	    echo -n "."
	end

	echo 
	rm "$i.csv"
    end
endif

# make output
set OUTPUT = "$DB-new-$class.csv"
if ( ! -e "$OUTPUT") then
    echo "STAT: creating $OUTPUT"
    /bin/rm -f "$OUTPUT:r:r".[0-9]*".csv"
    $0:h/mkclassvalues $DB $class
    $0:h/mkintervals $DB
    csvgrep -c classifier -m "$class" $DB-new-$class-values.csv | csvjoin -c "id,id" - $DB-intervals.csv | csvcut -c "interval,day,week,classifier,score" >! "$OUTPUT"
endif

# there are 96 15 minute intervals per day
set intervals = ()
@ i = 0
while ($i < 96)
    set intervals = ( $intervals $i )
    @ i++
end
set intnames = `echo $intervals | sed "s/ /,/g"`

set output = "new-$class.csv"

echo "day,weeks,$intnames" >! "$output"

set days = ( Sunday Monday Tuesday Wednesday Thursday Friday Saturday )
foreach d ( $days )
    set nweek = `csvgrep -c day -m "$d" $DB-new-$class.csv | csvcut -c week | tail +2 | sort | uniq | wc -l`
    echo -n "$d [$nweek]: "
    echo -n "$d,$nweek," >> "$output"
    @ j = 1
    foreach i ( $intervals )
	if ($j > 1) echo -n "," >> "$output"
	set k = `egrep "^$i,$d," $DB-new-$class.csv | wc -l | awk '{ print $1 }'`
	echo -n "$k "
	echo -n "$k" >> "$output"
	@ j++
    end
    echo
    echo  >> "$output"
end
